name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,rtl]"
    
    - name: Lint with flake8
      run: |
        flake8 memristor_nn tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 memristor_nn tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check memristor_nn tests
    
    - name: Import sort check with isort
      run: |
        isort --check-only memristor_nn tests
    
    - name: Type check with mypy
      run: |
        mypy memristor_nn --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=memristor_nn --cov-report=xml --cov-fail-under=85
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e ".[dev]"
    
    - name: Security check with bandit
      run: |
        bandit -r memristor_nn -f json -o bandit-report.json || true
        bandit -r memristor_nn
    
    - name: Check dependencies with safety
      run: |
        safety check

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run performance benchmarks
      run: |
        python -c "
        import memristor_nn as mn
        from memristor_nn.optimization import BenchmarkSuite
        import torch.nn as nn
        
        # Quick performance test
        suite = BenchmarkSuite()
        results = suite.benchmark_crossbar_operations([(32, 32), (64, 64)], num_iterations=3)
        print('Performance benchmarks passed')
        "

  build:
    needs: [test, security, performance]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true